# -*- coding: utf-8 -*-
"""LVADSUSR93-Keerthanaa.A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xhxrMwAIT0oxjmERiWO6-yN-D9NlBRk0
"""

import pandas as pd
url = '/content/Walmart_Dataset Python_Final_Assessment.xlsx'
df = pd.read_excel(url)

df

df.head()

df.info()

df.describe()

df.shape

df.size

num_column=df.select_dtypes(include = 'number')
num_column

cat_column=df.select_dtypes(include = 'object')
cat_column

#2
df.duplicated()

df.isnull().sum()


# There are no null values so it is not required to use fill

#3

import pandas as pd

numerical_data = df.select_dtypes(include=['number'])
descriptive_stats = numerical_data.describe()
descriptive_stats.loc['mode'] = numerical_data.mode().iloc[0]
descriptive_stats.loc['range'] = numerical_data.max() - numerical_data.min()
descriptive_stats.loc['variance'] = numerical_data.var()

print(descriptive_stats)

#4
import matplotlib.pyplot as plt

# Histograms
plt.figure(figsize=(12, 4))

plt.subplot(1, 3, 1)
plt.hist(df['Sales'], bins=10, color='skyblue', edgecolor='black')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.title('Sales Distribution')

plt.subplot(1, 3, 2)
plt.hist(df['Quantity'], bins=10, color='lightgreen', edgecolor='black')
plt.xlabel('Quantity')
plt.ylabel('Frequency')
plt.title('Quantity Distribution')

plt.subplot(1, 3, 3)
plt.hist(df['Profit'], bins=10, color='salmon', edgecolor='black')
plt.xlabel('Profit')
plt.ylabel('Frequency')
plt.title('Profit Distribution')

plt.tight_layout()
plt.show()

# Scatterplot
import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
plt.scatter(df['Sales'], df['Profit'], color='blue', alpha=0.7)
plt.xlabel('Sales')
plt.ylabel('Profit')
plt.title('Sales vs Profit')
plt.grid(True)
plt.show()

# Boxplots
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10, 6))

plt.subplot(1, 3, 1)
sns.boxplot(y='Sales', data=df, color='skyblue')
plt.title('Sales')

plt.subplot(1, 3, 2)
sns.boxplot(y='Quantity', data=df, color='lightgreen')
plt.title('Quantity')

plt.subplot(1, 3, 3)
sns.boxplot(y='Profit', data=df, color='salmon')
plt.title('Profit')

plt.tight_layout()
plt.show()

# Bar chart
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(8, 6))
sns.barplot(x='Category', y='Sales', data=df, palette='viridis')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.title('Sales by Category')
plt.xticks(rotation=45, ha='right')  # Rotate x-labels for better readability
plt.tight_layout()
plt.show()

#5

# correlations
correlation_matrix = df[['Sales', 'Quantity', 'Profit']].corr()

# The correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

#6

import pandas as pd
desc_stats = df[['Order ID', 'Sales', 'Quantity', 'Profit']].describe()
print("Descriptive Statistics:")
print(desc_stats)
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.subplot(1, 3, 1)
sns.boxplot(y='Sales', data=df)
plt.title('Sales')

plt.subplot(1, 3, 2)
sns.boxplot(y='Quantity', data=df)
plt.title('Quantity')

plt.subplot(1, 3, 3)
sns.boxplot(y='Profit', data=df)
plt.title('Profit')

plt.tight_layout()
plt.show()

#7
#Trend Analysis
import pandas as pd
import matplotlib.pyplot as plt

df['Ship Date'] = pd.to_datetime(df['Ship Date'])
df.set_index('Ship Date', inplace=True)

# Trend Analysis
df[['Sales', 'Profit']].resample('Y').sum().plot()
plt.title('Annual Sales and Profit Trends')
plt.show()

# Seasonal Analysis
df['Sales'].resample('M').sum().plot()
plt.title('Monthly Sales Trends')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import datetime

category_growth = df.groupby([df.index.year, 'Category'])['Sales'].sum().unstack()
category_growth.plot(kind='bar')
plt.title('Sales Growth by Product Category Over the Years')
plt.figure(figsize=(10, 6))
plt.show()

#Customer Analysis
import pandas as pd

customer_summary = df.groupby('EmailID').agg({'Order ID':'nunique', 'Sales':'sum'}).rename(columns={'Order ID':'Number_of_Orders'})
top_customers = customer_summary.sort_values(by=['Number_of_Orders', 'Sales'], ascending=False).head(5)

#top 5 customers
print(top_customers)


#Insights
#These customers have the most number of orders and has given a greater profit to the company by purchasing regularly.

df['Ship Date'] = pd.to_datetime(df['Ship Date'])
df.sort_values(by=['EmailID','Order Date'], inplace=True)
df['TimeBetweenOrders'] = df.groupby('EmailID')['Ship Date'].diff()
average_time_between_orders = df.groupby('EmailID')['TimeBetweenOrders'].mean()
print("Average Time Between Orders for Each Customer:")
print(average_time_between_orders)
print(average_time_between_orders.mean())

#Comprehensive Analysis
#7
#3.1
df['TimeBetweenOrderAndDelivery'] = df['Ship Date'] - df['Order Date']
average_time_between_order_and_delivery = df.groupby('Category')['TimeBetweenOrderAndDelivery'].mean()
print(average_time_between_order_and_delivery)

df['TimeBetweenOrderAndDelivery'] = df['Ship Date'] - df['Order Date']
average_time_between_order_and_delivery = df.groupby('EmailID')['TimeBetweenOrderAndDelivery'].mean()
print(average_time_between_order_and_delivery.mean())

#As of now the average time taken for the shipment of an order is 8 days and 20 hours.
#It stands highest for Tables delivery . Allocation of bigger trucks through optimised organisation of transporters can be introduced toimprove the supply chain.

#7
#3.2
#The geographic distribution of sales is influenced by factors such as demographics (age, income), cultural preferences, economic conditions and local requirements. Insights from these factors can inform targeted marketing by enabling businesses to tailor products, pricing, promotions, and advertising strategies to specific regions, demographics, and consumer behaviors thus improving sales performance and customer engagement.

#7
#3.3
customer_order_amounts = df.groupby('EmailID')['Sales'].sum().reset_index()

top_10_percent = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10_percent, 'Sales')
print(high_value_customers)

customer_order_amounts = df.groupby('EmailID')['Quantity'].sum().reset_index()

top_10_percent = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10_percent, 'Quantity')
print(high_value_customers)

for index, customer in high_value_customers.iterrows():
  pass

#iii) High value customers can be identified by their purchasing quantity, purchase frequency and pruchase amount . These customers can be given additional promotions and offers to enhance customer loyalty and they are more likely to recommend wallmart to other potential customers

