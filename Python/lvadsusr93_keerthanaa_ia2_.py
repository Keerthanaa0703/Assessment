# -*- coding: utf-8 -*-
"""LVADSUSR93 - Keerthanaa-IA2 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tcm0ZdsnPa29YRorOj7kCJviO0Axmxja
"""

#1
import numpy as np

def rgb_to_grayscale(rgb_image):

    grayscale_image = 0.2989 * rgb_image[:, :, 0] + 0.5870 * rgb_image[:, :, 1] + 0.1140 * rgb_image[:, :, 2]

    return grayscale_image

rgb_image = np.array([
    [[255, 0, 0], [0, 255, 0], [0, 0, 255]],
    [[128, 128, 128], [64, 64, 64], [192, 192, 192]],
    [[200, 100, 50], [150, 75, 25], [100, 50, 25]]
])

grayscale_result = rgb_to_grayscale(rgb_image)
print("Grayscale image:")
print(grayscale_result)

#10
import pandas as pd
data = {
    'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Homes', 'Goods'],
    'SalesPerson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank'],
    'Sales': [70000, 50000, 30000, 40000, 60000, 55000]
}
df = pd.DataFrame(data)

average_sales_per_person = df.groupby('Department')['Sales'].mean()

ranked_departments = average_sales_per_person.sort_values(ascending=False)

print("Average sales per person in each department:")
print(average_sales_per_person)
print("\nRanked departments based on sales:")
print(ranked_departments)

#2
import numpy as np

def normalize_data(data):
    means = np.mean(data, axis=0)
    stds = np.std(data, axis=0)
    normalized_data = (data - means) / stds
    return normalized_data

health_data = np.array([[170, 65, 30], [160, 55, 25], [180, 70, 35]])

normalized_health_data = normalize_data(health_data)

print("Normalized health data:")
print(normalized_health_data)

#7
import pandas as pd
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
    'Age': [25, 30, 35, 40, 45, 50, 55],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
    'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']
}
df = pd.DataFrame(data)
filtered_df = df[(df['Age'] > 45) & (df['Department'] != 'HR')]
result = filtered_df[['Name', 'City']]
print(result)

#5

import numpy as np
student_scores = np.array([
    [80, 85, 90, 95, -1],
    [70, 75, 80, 85, 90],
    [60, 65, 70, 75, 80],
    [90, 85, 80, 75, 70]
])

last_3_subjects_scores = student_scores[:, -3:]
last_3_subjects_scores[last_3_subjects_scores == -1] = np.nan


average_scores = np.nanmean(last_3_subjects_scores, axis=1)

student_names = {
    0: "Student 1",
    1: "Student 2",
    2: "Student 3",
    3: "Student 4"
}

for i, avg_score in enumerate(average_scores):
    print(f"{student_names[i]}: Average Score = {avg_score:.2f}")

#4
import numpy as np
sports_data = np.array([
    [80, 85, 90, 95, 100],
    [70, 75, 80, 85, 90],
    [60, 65, 70, 75, 80]
])

first_game_scores = sports_data[:, 0]
last_game_scores = sports_data[:, -1]
improvement = last_game_scores - first_game_scores

athlete_names = {
    0: "Athlete 1",
    1: "Athlete 2",
    2: "Athlete 3"
}

for i, imp in enumerate(improvement):
    print(f"{athlete_names[i]}: Improvement = {imp}")

#3

import numpy as np
sensor_data = np.array([
    [[1, 2], [3, 4]],  # Sensor 1 data (2x2 array)
    [[5, 6], [7, 8]],  # Sensor 2 data (2x2 array)
    [[9, 10], [11, 12]]
])

flattened_data = sensor_data.reshape(sensor_data.shape[0], -1)

sensor_1_2d = flattened_data[0].reshape(2, 2)
sensor_2_2d = flattened_data[1].reshape(2, 2)
sensor_3_2d = flattened_data[2].reshape(2, 2)

print("Sensor 1 data (2-D array):")
print(sensor_1_2d)
print("\nSensor 2 data (2-D array):")
print(sensor_2_2d)
print("\nSensor 3 data (2-D array):")
print(sensor_3_2d)

#9
import pandas as pd

employee_data = {
    'EmployeeID': [101, 102, 103, 104, 105],
    'EmployeeName': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales'],
    'ManagerID': [201, 202, 203, 204, 205]
}

project_assignments = {
    'ProjectID': [301, 302, 303, 304],
    'ProjectName': ['Project A', 'Project B', 'Project C', 'Project D'],
    'EmployeeID': [101, 102, 103, None]
}

employee_df = pd.DataFrame(employee_data)
project_df = pd.DataFrame(project_assignments)

merged_df = pd.merge(project_df, employee_df, on='EmployeeID', how='left')

print("Mapped projects to departments and managers:")
print(merged_df[['ProjectID', 'ProjectName', 'Department', 'ManagerID']])