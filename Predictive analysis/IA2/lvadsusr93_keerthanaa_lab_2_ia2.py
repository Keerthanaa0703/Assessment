# -*- coding: utf-8 -*-
"""LVADSUSR93-Keerthanaa-Lab-2-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AEqJd7scErUjp6d5nk2pCjpJlHEi6ZZI
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('/content/Mall_Customer.csv')

# Data Exploration and Preprocessing
scaler = StandardScaler()
numerical_features = ['Age','Annual Income ','Spending Score ']
data[numerical_features] = scaler.fit_transform(data[numerical_features])

# Handling Missing Values
data.dropna(inplace=True)

# Feature Engineering
data['Spending_to_Income_Ratio'] = data['Spending Score '] / data['Annual Income ']

# Elbow Method
inertia = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(data[numerical_features])
    inertia.append(kmeans.inertia_)

# Plotting the Elbow Curve
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

# Silhouette Score
silhouette_scores = []
for i in range(2, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(data[numerical_features])
    score = silhouette_score(data[numerical_features], kmeans.labels_)
    silhouette_scores.append(score)

# Plotting the Silhouette Scores
plt.figure(figsize=(10, 6))
plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.title('Silhouette Score Analysis')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette Score')
plt.show()

# K-Means
kmeans = KMeans(n_clusters=5, random_state=42)
data['Cluster'] = kmeans.fit_predict(data[numerical_features])

# Cluster Profiling
cluster_profile = data.groupby('Cluster').mean()

print(cluster_profile)

# Strategy Development Based on Clusters
for cluster_num in range(kmeans.n_clusters):
    cluster_data = data[data['Cluster'] == cluster_num]


    demographic_analysis = cluster_data[['Age','Gender', 'Annual Income ']].describe()

    spending_analysis = cluster_data[['Spending Score ']].describe()

    if demographic_analysis['Age']['mean'] < 20:
        print(f"Cluster {cluster_num}: Implement digital marketing campaigns on social media.")
    else:
        print(f"Cluster {cluster_num}: Focus on traditional marketing channels like TV and print media.")

    if spending_analysis['Spending Score ']['mean'] >= 50:
        print(f"Cluster {cluster_num}: Offer loyalty programs and premium services.")
    else:
        print(f"Cluster {cluster_num}: Provide discounts and value deals.")